#summary BEARについて(en)
#labels Manual,Phase-Design

= BEAR概要 =

[http://www.bear-project.net/blog/wp-content/uploads/2011/07/bear_prv.gif]

BEAR is a resource oriented framework.

== 3 components ==
  * *page* request resource, push to view
  * *resource* a information with interface with URI (REST)
  * *view* resource representation

This is simple example to have HTML.

  # user request page, page request resource with read method.
  # retrieved data pushed to view, then it become HTML

= A Resource Oriented Design =

In BEAR, model is used as "resource"

"resource model" has no particular own method like "object model", Instead of method. The resource has unified request interface.(REST)

Let's assume HTML page as representation of resource. for instance, the blog entry page is as visualized resource of "blog page resource". One page contains single or multiple resource. "entry resource" will have a "comment resource" or "trackback resource" Each resource is liked each other and have a view template for representation.

BEAR resource model structure is flat. Data source(DB) / model / view has less "impedance mismatch"（[http://en.wikipedia.org/wiki/Object-relational_impedance_mismatch )

Not only "push" from page to view, but "pull" from view to resource is also available. Lazy request is also supported.Reusability of resource is also BEAR's feature. You can use resource not only "page" (controller), but also console or batch even socket is available. This functionality brought smoothly because its all resource oriented design.

Resource can have multiple representation, HTML for PC, Mobile or web service data (JSON/XML)
). Using "resource template" enables separation of resource value and its representation.

Resource works as "service layer", Using DB or remote XML, local CSV file under that layer enable same usage and get same benefit in all resource, such as cache, log, or paging. It also enable multiple layering system.(REST)  

Some framework deal with model as data source, or some say model should be "domain model" which has self disciplines.

In BEAR, resource woks as data source, service layer, or domain model.This is based on the idea model define is designed by application, not by framework. for instance, "today's notification" is enough as data source. but "train service management" is not enough with active record, I think.

More than component itself or how to behave as model, The link and framework of application and more focused. These are connected with "REST", That's basic architecture of "BEAR".

= Page Oriented Design =

BEAR use page controller (not front controller) Each URI　has "page" which handle each URI resource and independent.

"Main" request "Page", then "Page" request "Resource". The page may the collection of resource.

The page is the collection of event handler.
More than think web site as application, 


|| *Event* || *Method* || 
|| Inject || onInject() || 
|| Init || onInit(array $args) || 
|| output || onOutput() ||
|| Submit OK || onAction(array $submit) ||
|| Active link click ||  onClick($id) ||
|| Execption ||  onExecption(Exception $e) ||


= DI（依存性の注入）=
= DI (Dependency Injection)
A construction of object with setting and get dependencies are performed in so called "DI tool". Which enable test and configration easier. Most of component in BEAR can be replaceable.BEAR class has same constructor and configuration property and injection method.The "Registry" in DI tool handle instance call, "Singleton" service is default.It worked as service locater.

=スペック=
==SPEC ==
    * first release 2008 summer
    * PHP5.2+
    * PEAR component / PEAR coding style
    * Smarty
    * pluggable, not full stack
    * Multi user agent (UA sniffing, PC/Mobile/etc...)
    * UTF-8
    * double post check, CSRF
    * logging, cache(File/APC/Memcache), Iimage(GD/iMagick/Cairo)
    * error handler, debugging tool
    * online editor
    * PSR-0 auto loder


= More about BEAR =

See more at [software_design ソフトウェアデザイン].
